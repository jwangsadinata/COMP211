binsearch

int lower = 0;
int upper = n;

while (lower < upper) 
//@loop_invariant 0 <= lower && lower <= upper && upper <= n;
//@loop_invariant lower == 0 || A[lower - 1] < x;
//@loop_invariant upper == n || x < A[upper];
{
	int mid = (lower + upper) / 2;
	//@assert lower <= mid && mid < upper;

	if (x == A[mid]) {
		return mid;
	}
	
	else if (x < A[mid]) {
		upper = mid;
	}

	else {
		//@assert A[mid] < x;
		lower = mid + 1;
	}


}

return -1;

//use while loop

//@assert -> this boolean is true at this particular line
//@assert lower <= mid & mid < upper

// how to prove assert

Proving the result using LI
At the end, lower = upper
4 cases
lower 0, x < A[upper]
upper n, A[lower - 1] < x
lower 0, upper n

A[lower - 1] < x and x < A[upper]

A[upper - 1] < x and x < A[upper]
Two disjoint parts of the array
x is not part of the array



Preservation
1. //@loop_invariant 0 <= lower && lower <= upper && upper <= n;
2. //@loop_invariant lower == 0 || A[lower - 1] < x;
3. //@loop_invariant upper == n || x < A[upper];

Case when A[mid] < x

1. prove each -> 0 <= mid + 1 <= upper <= n
2. A[(mid + 1) - 1] < x --> A[mid] < x which is the assert test.
3. upper' = upper -> it does not change, it was true before and thus, it is still true.

How fast is this binary search program?
The time is proportional to logbase2 of n.

How about linear search program: time proportional of n.

