//Lecture notes 9

bool is_in(int x, int[]A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
	for (int i = lower; i < upper; i++) 
	//@ loop_invariant lower <= i;
	{
		if (A[i] == x) {	return true;	}
	}
	return false;
}

/* A[i] is in bounds
we want to show that 0 <= i < length(A)

prove i < length 
1. i < upper by the loops test
2. upper <= length(A) by the precondition
therefore i < length(A)

prove 0 <= i;
1. 0 <= lower by precondition
2. lower <= i by loop loop_invariant
3. 0 <= i by transitivity.
*/


// A[lower, upper) is sorted in increasing order
// Since we are excluding the upper
bool is_sorted(int[] A, int lower, int upper) 
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
	for (int i = lower; i < (upper - 1); i++) 
	//@loop_invariant lower <= i;

	{
		if (A[i] > A[i + 1]) {	return false;  }
	}
	return true;
}


// Remember we don't necessarily check the contract to run the code.
// In this program we want to return the position where x occurs.
// how do the contract make the function tighter -> think about those when you are writing a contract
int search(int x, int[] A, int upper) 
//@requires 0 <= upper && upper <= \length(A);
//@requires is_sorted(A,0,upper);
//@ensures (\result == -1 && !is_in(x, A, 0, upper)) || (0 <= \result && \result < upper && A[\result] == x);
// This is a complete specification of the function.
{
	for (int i = 0; i < upper; i++) 
	//@loop_invariant 0 <= i && i <= upper; /* by the pinch i = upper */
	//@loop_invariant !is_in(x,A,0,i); /* we want to check one by one on the left of the function */

	{
		if (A[i] == x) { return i; }
		else if (A[i] > x) { return -1; }
	}
	return -1;
}